@page "/"

@using Siemens.MP.Entities
@using Siemens.MP.Enums
@inject Siemens.MP.Data.Repositories.GenericRepository<Note> NoteRepository
@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.Task> TaskRepository
@inject NavigationManager navigationManager


<AuthorizeView>
    <h1><span style="color:#45165c">Hello, </span> <span style="color:#7d28a6">@context.User.Identity.Name.Split("@").First()</span></h1>
</AuthorizeView>
<p></p>

<head>
    <link rel="stylesheet" href="/css/Index.css" />
</head>
<body>
    <div class="card">
        <h5 class="card-header">Actual tasks</h5>
        <div class="card-body">
            <div>
                <h5 class="card-title" style="float:left">Grafic : @now.ToShortDateString().Replace('-', ' ')</h5>
                <button id="0HLPS1QEUG99M" type="button" class="btn btn-outline-info" onclick="popoverFunction()" data-toggle="popover" data-content="Number of Tasks" data-placement="bottom"
                        style="width:80px; height:30px; margin-bottom:0px; margin-left:17px; background-color:#b469d9; color:#531b6f; border-bottom-color:aqua">
                    INFO
                </button>
            </div>

            <p></p>

            <div>
                <div>
                    <p style="float:left; width:90px">To Do:</p>
                    <div class="progress" style="margin:40px; height:25px" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="@nrToDo">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @firstWidth%; background-color:firebrick" aria-valuemin="0" aria-valuemax="100">@firstWidth%</div>
                    </div>
                </div>

                <div>
                    <p style="float:left; clear:both; width:90px">Ongoing:</p>
                    <div class="progress" style="margin:40px; height:25px" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="@nrOngoing">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @secondWidth%; background-color:darkorange" aria-valuemin="0" aria-valuemax="100">@secondWidth%</div>
                    </div>
                </div>

                <div>
                    <p style="float:left; clear:both; width:90px">Code review:</p>
                    <div class="progress" style="margin:40px; height:25px" data-toggle="popover" data-placement="bottom" data-trigger="hover" data-content="@nrCodeReview">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @thirdWidth%; background-color:mediumpurple" aria-valuemin="0" aria-valuemax="100">@thirdWidth%</div>
                    </div>
                </div>

                <div>
                    <p style="float:left; clear:both; width:90px">Done:</p>
                    <div class="progress" style="margin:40px; height:25px" data-toggle="popover" data-placement="bottom" data-trigger="hover" data-content="@nrDone">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @fourthWidth%; background-color:lightseagreen" aria-valuemin="0" aria-valuemax="100">@fourthWidth%</div>
                    </div>
                </div>
            </div>

            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                Ai <a href="#" class="alert-link">@nrHighPriorityTask</a> task-uri urgente! <strong>Alert Link.</strong>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header" style="background-color:mediumpurple">
            <p class="h5">
                <button id="0HLPTKM2659LL" type="button" class="btn" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                    <b>Weekly productivity tracking</b>
                    <div class="spinner-grow spinner-grow-sm text-danger" role="status" style="animation-duration:1s">
                        <span class="sr-only"></span>
                    </div>
                </button>
            </p>
        </div>
        <div class="collapse" id="collapseOne">
            <div class="card-body">

                <LineChart @ref="lineChart" TItem="double" />

                <button id="0HLPT1HBT4CU7" type="button" class="btn btn-outline-light" style="font-size:40px">⇦</button>
                <button id="0HLPT1HBT4CU7" type="button" class="btn btn-outline-light" style="font-size:40px; float:right">⇨</button>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header" style="background-color:#ba55d3">
            <p class="h5">
                <button id="0HLPTKM2659LL" type="button" class="btn" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    <b>Note</b>
                    <img src="/css/writing.png" height="20" width="20">
                </button>
            </p>
        </div>
        <div class="collapse" id="collapseTwo">
            <div class="card-body" style="background-color:whitesmoke">
                <ul>
                    @foreach (var note in notes)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center" style="background-color:#fcf5ec">
                            <details>
                                <summary class="buttonList" style="width:1200px">@note.Title <i style="float:right">@note.CreatedAt.ToShortDateString()</i></summary>
                                <p class="mb-auto">@note.Content</p>
                            </details>
                        </li>
                    }
                </ul>
                <button id="0HLPTP1OMP5O1" type="button" class="btn btn-outline-success" data-toggle="modal" data-target="#exampleModal" @onclick="OpenModal">
                    Add
                </button>
                @if (ShowModal == true)
                {
                    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header" style="background-color:#ffeaff">
                                    <input placeholder="Note Title" style="width:400px; background-color:#fff7ff" @bind="title" />
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body" style="background-color:#ffeaff">
                                    <textarea style="width:460px; height:400px; background-color:#ffffea" @bind="content"></textarea>
                                </div>
                                <div class="modal-footer" style="background-color:#ffeaff">
                                    <button type="button" class="btn btn btn-success" @onclick="AddNote">Save</button>
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>

</body>




@code
{

    private float firstWidth = 50;
    private float secondWidth = 50;
    private float thirdWidth =  50;
    private float fourthWidth =  50;

    private int numberOfUrgentTasks = 7;

    private int nrToDo = 0;
    private int nrOngoing = 0;
    private int nrCodeReview = 0;
    private int nrDone = 0;
    private int nrHighPriorityTask = 0;

    private DateTime now = DateTime.Now;

    private string title;
    private string content;
    private IList<Note> notes;
    bool ShowModal = false;

    List<Siemens.MP.Entities.Task> tasks;

    private void OpenModal()
    {
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void AddNote()
    {
        if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(content))
        {
            Note newNote = new Note
            {
                Title = title,
                Content = content
            };

            NoteRepository.Insert(newNote);
            OnInitializedAsync();
            ResetFieldToDefault();
            CloseModal();
        }
    }

    private void ResetFieldToDefault()
    {
        title = string.Empty;
        content = string.Empty;
    }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        notes = await NoteRepository.GetAll();
        tasks = await TaskRepository.GetAll();

        foreach (var task in tasks)
        {

            if (task.State == StateOfTask.TO_DO)
            {
                nrToDo++;

            }
            else if (task.State == StateOfTask.ONGOING)
            {
                nrOngoing++;

            }
            else if (task.State == StateOfTask.CODE_REVIEW)
            {
                nrCodeReview++;

            }
            else if (task.State == StateOfTask.DONE)
            {
                nrDone++;
            }
        }
        Percentage();
        foreach(var task in tasks)
        {
            if (task.PriorityState == Priority.HIGH)
            {
                nrHighPriorityTask++;
            }
        }


    }

    private void Percentage()
    {
        firstWidth = ((float) nrToDo / tasks.Count) * 100;
        secondWidth = ((float) nrOngoing / tasks.Count) * 100;
        thirdWidth = ((float) nrCodeReview / tasks.Count) * 100;
        fourthWidth = ((float) nrDone / tasks.Count) * 100;
    }


    LineChart<double> lineChart;

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        await HandleDraw();
    }


    async System.Threading.Tasks.Task HandleDraw()
    {

        lineChart.AddLabel(Labels);

        lineChart.AddDataSet(GetLineChartDataset());

        await lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "number of your done tasks",
            Data = DataHardcode(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 5,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "week 1", "week 2", "week 3", "week 4", "week 5", "week 6" };  //array --> list
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(93, 206, 212, 0.5f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(50, 191, 195, 1) };


    List<double> DataHardcode()
    {
        var listData = new List<double> { 0, 1, 3, 1, 4, 5 };
        return listData;
    }
}