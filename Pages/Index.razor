@page "/"

@using Siemens.MP.Entities
@using Siemens.MP.Enums
@using Siemens.MP.Pages.Components

@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.Task> TaskRepository
@inject NavigationManager navigationManager
@inject Siemens.MP.Areas.Identity.IdentityUtilsService identityUtils


<AuthorizeView>
    <h1><span style="color:#45165c">Hello, </span> <span style="color:#7d28a6">@context.User.Identity.Name.Split("@").First().ToUpper()</span></h1>
</AuthorizeView>
<p></p>

<head>
    <link rel="stylesheet" href="/css/Index.css" />
</head>
<body>

    <div class="card" style="margin-bottom:10px">
        <div class="card-header" style="background-color:#705af2">
            <p class="h5">
                <button type="button" class="btn" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="#collapseOne" style="width:170px">
                    <img src="/css/combo-xxl.png" height="20" width="20" style="float:left">
                    <h5 style="color:white"><b>Actual tasks</b></h5>
                </button>
            </p>
        </div>
        <div class="collapse show" id="collapseOne">
            <div class="card-body">
                <div>
                    <h5 class="card-title" style="float:left; color:darkblue">Grafic : @now.ToShortDateString().Replace('-', ' ') </h5>
                    <p style="color:darkblue; float:right">Pentru a vedea numarul task-urilor dați double-click pe progress bar</p>
                </div>

                <p></p>

                <div>
                    <div>
                        <p style="float:left; width:90px; color:darkblue">To Do:</p>  
                        <div class="progress" onclick="popoverFunction()" style="margin:40px; height:25px" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="number of to do tasks: @nrToDo">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @firstWidth%; background-color:firebrick" aria-valuemin="0" aria-valuemax="100">@firstWidth%</div>
                        </div>
                    </div>

                    <div>
                        <p style="float:left; clear:both; width:90px; color:darkblue">Ongoing:</p>
                        <div class="progress" onclick="popoverFunction()" style="margin:40px; height:25px" data-toggle="popover" data-placement="top" data-trigger="hover" data-content="number of ongoing tasks: @nrOngoing">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @secondWidth%; background-color:darkorange" aria-valuemin="0" aria-valuemax="100">@secondWidth%</div>
                        </div>
                    </div>

                    <div>
                        <p style="float:left; clear:both; width:90px; color:darkblue">Code review:</p>
                        <div class="progress" onclick="popoverFunction()" style="margin:40px; height:25px" data-toggle="popover" data-placement="bottom" data-trigger="hover" data-content="number of code review tasks: @nrCodeReview">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @thirdWidth%; background-color:mediumpurple" aria-valuemin="0" aria-valuemax="100">@thirdWidth%</div>
                        </div>
                    </div>

                    <div>
                        <p style="float:left; clear:both; width:90px; color:darkblue">Done:</p>
                        <div class="progress" onclick="popoverFunction()" style="margin:40px; height:25px" data-toggle="popover" data-placement="bottom" data-trigger="hover" data-content="number of done tasks: @nrDone">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @fourthWidth%; background-color:lightseagreen" aria-valuemin="0" aria-valuemax="100">@fourthWidth%</div>
                        </div>
                    </div>
                </div>

                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    Ai <a href="#" class="alert-link">@nrUrgentTask</a> task-uri cu <span style="color:#c30000">urgente</span>! <strong>Alert Link.</strong>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card" style="margin-bottom:10px">
        <div class="card-header" style="background-color:mediumpurple">
            <p class="h5">
                <button id="0HLPTKM2659LL" type="button" class="btn" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo" style="width:330px">
                    <img src="/css/planner-xxl.png" height="20" width="20" style="float:left">
                    <h5 style="color:white"><b>Weekly productivity tracking</b></h5>
                </button>
            </p>
        </div>
        <div class="collapse" id="collapseTwo">
            <div class="card-body">

                <LineChart @ref="lineChart" TItem="double" />

                <button id="0HLPT1HBT4CU7" type="button" class="btn btn-outline-light" style="font-size:40px">⇦</button>
                <button id="0HLPT1HBT4CU7" type="button" class="btn btn-outline-light" style="font-size:40px; float:right">⇨</button>
            </div>
        </div>
    </div>

    <div>
        <NoteComponent></NoteComponent>
    </div>

</body>


@code
{

    private UserInfo userInfo;
    private float firstWidth = 42;
    private float secondWidth = 33;
    private float thirdWidth = 8;
    private float fourthWidth = 17;

    private int nrToDo = 5;
    private int nrOngoing = 4;
    private int nrCodeReview = 1;
    private int nrDone = 2;
    private int nrUrgentTask;
    private TimeSpan difference;
    private int myTasks = 0;

    private DateTime now = DateTime.Now;
    private TimeSpan maxValue = TimeSpan.FromDays(5);

    List<Siemens.MP.Entities.Task> tasks;


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {

        userInfo = identityUtils.GetCurrentUserAwaited();
        tasks = await TaskRepository.GetAll();

        foreach (var task in tasks)
        {

            if (task.State == StateOfTask.TO_DO && task.UserInfoId == userInfo.Id)
            {
                nrToDo++;
                myTasks++;

            }
            else if (task.State == StateOfTask.ONGOING && task.UserInfoId == userInfo.Id)
            {
                nrOngoing++;
                myTasks++;

            }
            else if (task.State == StateOfTask.CODE_REVIEW && task.UserInfoId == userInfo.Id)
            {
                nrCodeReview++;
                myTasks++;

            }
            else if (task.State == StateOfTask.DONE && task.UserInfoId == userInfo.Id)
            {
                nrDone++;
                myTasks++;
            }
        }
        //Percentage();

        foreach (var task in tasks)
        {
            if (task.PriorityState == Priority.HIGH && task.UserInfoId == userInfo.Id)
            {
                difference = task.Deadline - DateTime.Now;
                nrUrgentTask++;
                if(difference<DateTime.)
                {

                    NumberOfDaysRemaining = (int)difference.TotalDays;
                }
            }
        }
        foreach (var task in tasks)
        {
            TimeSpan difference = task.Deadline - DateTime.Today;
            if(int.Parse(difference))
        }


    }

    //private void Percentage()
    //{
    //   firstWidth = ((float)nrToDo / myTasks) * 100;
    //    secondWidth = ((float)nrOngoing / myTasks) * 100;
    //    thirdWidth = ((float)nrCodeReview / myTasks) * 100;
    //    fourthWidth = ((float)nrDone / myTasks) * 100;
    //}


    LineChart<double> lineChart;

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        await HandleDraw();
    }


    async System.Threading.Tasks.Task HandleDraw()
    {

        lineChart.AddLabel(Labels);

        lineChart.AddDataSet(GetLineChartDataset());

        await lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "number of your done tasks",
            Data = DataHardcode(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 5,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "week 1", "week 2", "week 3", "week 4", "week 5", "week 6" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(93, 206, 212, 0.5f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(50, 191, 195, 1) };


    List<double> DataHardcode()
    {
        var listData = new List<double> { 0, 2, 1, 4, 2, 3 };
        return listData;
    }
}