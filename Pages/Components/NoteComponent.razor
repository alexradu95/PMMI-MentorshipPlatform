@using Siemens.MP.Entities
@inject Siemens.MP.Data.Repositories.GenericRepository<Note> NoteRepository
@inject Siemens.MP.Areas.Identity.IdentityUtilsService identityUtils


<div class="card">
    <div class="card-header" style="background-color:#ba55d3">
        <p class="h5">
            <button id="0HLPTKM2659LL" type="button" class="btn" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                <img src="/css/writing.png" height="20" width="20">
                <b>Note</b>
            </button>
        </p>
    </div>
    <div class="collapse" id="collapseThree">
        <div class="card-body" style="background-color:whitesmoke">
            <div hidden="hidden">
                <p hidden=""></p>
            </div>
            @if (notes.Count == 0)
            {
                <p style="text-align:center"><b>No Notes</b></p>
            }
            else
            {
                <ul>
                        @foreach (var note in notes.Where(note => (note.CreatedBy != null && note.CreatedBy.UserName.Equals(identityUtils.GetCurrentUserName()))))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" style="background-color:#fcf5ec">
                                @if (hideCheckbox == true)
                                {
                                    <input type="checkbox" style="float:left; top:3px;width:18px;height:18px" @bind="note.CheckedForDeletion" />
                                }
                                <details>
                                    <summary class="buttonList" style="width:1200px">@note.Title <i style="float:right">@note.CreatedAt.ToShortDateString()</i></summary>
                                    <p class="mb-auto">@note.Content</p>
                                </details>
                            </li>
                        }
                </ul>
            }
            <button id="0HLPTP1OMP5O1" type="button" class="btn btn-outline-success" data-toggle="modal" data-target="#exampleModal" onclick="modalFunction">
                Add
            </button>
            <button id="0HLQ2DMRVMGHF" type="button" class="btn btn-outline-primary" style="float:right" @onclick="Edit">
                EDIT
            </button>
            @if (hideCheckbox == true)
            {
                <button type="button" class="btn btn-outline-danger" style="float:right; margin-right:20px" @onclick="DeleteProject">DELETE</button>
            }


            <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header" style="background-color:#ffeaff">
                            <input placeholder="Note Title" style="width:400px; background-color:#fff7ff" @bind="title" />
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="background-color:#ffeaff">
                            <textarea style="width:460px; height:400px; background-color:#ffffea" @bind="content"></textarea>
                        </div>
                        <div class="modal-footer" style="background-color:#ffeaff">
                            <button type="button" class="btn btn btn-success" @onclick="AddNote">Save</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@code {

    private IList<Note> notes;

    private UserInfo userInfo;

    [Parameter]
    public int IdNote { get; set; }

    private string title;
    private string content;

    private bool hideCheckbox = false;


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        notes = await NoteRepository.GetAll();
        userInfo = identityUtils.GetCurrentUserAwaited();
    }

    private void AddNote()
    {
        if (!string.IsNullOrWhiteSpace(title) && !string.IsNullOrWhiteSpace(content))
        {
            Note newNote = new Note
            {
                Title = title,
                Content = content
            };

            NoteRepository.Insert(newNote);
            OnInitializedAsync();
            ResetFieldToDefault();
        }
    }

    private void Edit()
    {
        hideCheckbox = true;
    }

    private void DeleteProject()
    {
        foreach (var note in notes)
        {
            if (note.CheckedForDeletion == true)
            {
                NoteRepository.Delete(note.Id);
            }
        }
        OnInitializedAsync();
        hideCheckbox = false;
    }

    private void ResetFieldToDefault()
    {
        title = string.Empty;
        content = string.Empty;
    }
}
