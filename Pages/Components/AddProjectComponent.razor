@using Siemens.MP.Entities
@inject Siemens.MP.Data.Repositories.GenericRepository<Project> ProjectRepository

@if (ShowPopup)
{
    <!-- This is the popup to create a project -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Add new Project</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">Close</span>
                    </button>
                </div>
                <!-- Form to add a new project -->
                <div class="modal-body">
                    <input class="form-control" type="text"
                           placeholder="Project Title"
                           @bind="project.Title" />

                    <input class="form-control" type="text" 
                           placeholder="Project Description"
                           @bind="project.Description" />

                    <input class="form-control" type="text"
                           placeholder="Project Short Description"
                           @bind="project.DescriptionPreview" />

                    <input class="form-control" type="date"
                           @bind="project.DeadLine" />

                    <br />
                    <p style="color:red">@errorMessage</p>
                    <!-- Button to save the project -->
                    <button class="btn btn-primary"
                            @onclick="SaveProject">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IList<Siemens.MP.Entities.Project> projects;


    [Parameter]
    public bool ShowPopup { get; set; }

    [Parameter]
    public EventCallback<bool> ShowPopupChanged { get; set; }

    [Parameter]
    public int ProjectID { get; set; }

    [Parameter]
    public EventCallback<int> ProjectIDChanged { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        projects = await ProjectRepository.GetAll();
        project.DeadLine = DateTime.Now.AddDays(1);
    }

    Project project = new Project();

    public string errorMessage;

    void ClosePopup()
    {
        ShowPopup = false;
        errorMessage = "";
    }

    private void SaveProject()
    {
        if (project.Title != null && project.Description != null && project.DescriptionPreview != null && project.DeadLine > DateTime.Now)
        {
            Project newProject = new Project
            {
                Title = project.Title,
                Description = project.Description,
                DescriptionPreview = project.DescriptionPreview,
                DeadLine = project.DeadLine
            };
            ProjectRepository.Insert(newProject);
            ClosePopup();
            base.StateHasChanged();
        }
        else
        {
            errorMessage = "Please insert Title, Descriptions and Deadline!";
        }
    }
}
