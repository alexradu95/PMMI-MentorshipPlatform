@using Siemens.MP.Entities
@using Siemens.MP.Enums
@inject Siemens.MP.Data.Repositories.GenericRepository<Project> ProjectRepository
@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.Task> TaskRepository

@if (project == null)
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Please choose a project from the list to get detailed information about it.</h4>
        </div>
    </div>
}
else if (edit == true)
{
    <center>
        <div class="modal-body" style="width:50%; text-align: center;">
            <p>Edit the project title:</p>
            <input class="form-control" type="text"
                   placeholder="Project Title"
                   @bind="project.Title" /> <br />

            <p>Edit the project description:</p>
            <input class="form-control" type="text"
                   placeholder="Project Description"
                   @bind="project.Description" /> <br />

            <p>Edit the project short description:</p>
            <input class="form-control" type="text"
                   placeholder="Project Short Description"
                   @bind="project.DescriptionPreview" /> <br />

            <p>Edit the project deadline:</p>
            <input class="form-control" type="date"
                   placeholder="Project Deadline"
                   @bind="project.DeadLine" />

            <br />
            <!-- Button to save the project -->
            <button class="btn btn-primary"
                    @onclick="SaveProject">
                Save
            </button>
            <button class="btn btn-danger"
                    @onclick="DeleteProject">
                Delete
            </button>
            <button class="btn btn-success"
                    @onclick="GoBack">
                Back
            </button>
        </div>
    </center>
}
else if (addTask == true)
{
    <center>
        <div class="modal-body" style="width:50%; text-align: center;">
            <p>Enter the task name:</p>
            <input class="form-control" type="text"
                   placeholder="Task name:"
                   @bind="taskName" /> <br />

            <p>Enter the task description:</p>
            <input class="form-control" type="text"
                   placeholder="Task Description"
                   @bind="taskDescription" /> <br />

            <p>Enter the task short description</p>
            <input class="form-control" type="text"
                   placeholder="Task Short Description"
                   @bind="taskDescriptionPreview" /> <br />

            <p>Enter the task deadline:</p>
            <input class="form-control" type="date"
                   placeholder="Task Deadline"
                   @bind="deadline" />  <br />

            <select @bind="priorityState">
                @foreach (Priority pS in Enum.GetValues(typeof(Priority)))
                {
                    <option value=@pS>@pS.ToString()</option>
                }
            </select>

            <!-- Button to add the task -->
            <button class="btn btn-primary"
                    @onclick="SaveTask">
                Add Task
            </button>
            <button class="btn btn-success"
                    @onclick="GoBack">
                Back
            </button>
        </div>
    </center>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title" style="font-weight:bold">@project.Title</h5>
            <p class="card-text">@project.Description</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <span class="taskinfo badge badge-primary badge-pill list-group-item-danger">Created by @project.CreatedBy.UserName.Split('@').First()</span>
            </li>
            <li class="list-group-item">
                <span class="taskinfo badge badge-primary badge-pill list-group-item-success">Deadline: @project.DeadLine</span>
            </li>

            <li class="list-group-item">
                <h4>Students working on this project</h4>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Marcelino</span>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Iohannis</span>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Base</span>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Dancila</span>
            </li>
        </ul>
        <AuthorizeView Roles="ADMIN,MENTOR">
            <center>
                <button class="btn btn-primary" @onclick="@(() => EditProject(project))" style="width:20%">
                    Edit Project
                </button>
                <button class="btn btn-primary" @onclick="@(() => AddTask())" style="width:20%">
                    Add New Task
                </button>
            </center>
        </AuthorizeView>
    </div>
}
@code {

    private string taskName;
    private string taskDescriptionPreview;
    private DateTime deadline;
    private StateOfTask status;
    private Priority priorityState;
    private string taskDescription;

    [Parameter]
    public int IdProject { get; set; }
    [Parameter]
    public EventCallback<int> IdProjectChanged { get; set; }

    private IList<Siemens.MP.Entities.Project> projects;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        projects = await ProjectRepository.GetAll();
        deadline = DateTime.Now.AddDays(1);
    }

    public Siemens.MP.Entities.Project
       project => projects.FirstOrDefault(project => project.Id == IdProject);

    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public EventCallback<bool> editChanged { get; set; }

    [Parameter]
    public bool addTask { get; set; }
    [Parameter]
    public EventCallback<bool> addTaskChanged { get; set; }

    public Project objProject;

    private void EditProject(Project editProject)
    {
        objProject = editProject;
        edit = true;
    }

    private void AddTask()
    {
        addTask = true;
    }

    private void SaveTask()
    {
        if (taskName != "" && taskDescription != "" && deadline > DateTime.Now && taskDescriptionPreview != "" && priorityState != Priority.DEFAULT)
        {
            Siemens.MP.Entities.Task newTask = new Siemens.MP.Entities.Task
            {
                Name = taskName,
                DescriptionPreview = taskDescriptionPreview,
                Deadline = deadline,
                Description = taskDescription,
                PriorityState = priorityState,
                ProjectId = IdProject
            };
            TaskRepository.Insert(newTask);
            OnInitializedAsync();
            addTask = false;
        }
    }

    private void SaveProject()
    {
        ProjectRepository.Update(objProject);
        OnInitializedAsync();
        edit = false;
    }

    private void DeleteProject()
    {
        ProjectRepository.Delete(IdProject);
        OnInitializedAsync();
        edit = false;
    }

    private void GoBack()
    {
        if (edit == true)
            edit = false;
        else if (addTask == true)
            addTask = false;
    }
}
