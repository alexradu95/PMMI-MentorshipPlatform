@using Siemens.MP.Entities
@inject Siemens.MP.Data.Repositories.GenericRepository<Project> ProjectRepository
@inject NavigationManager NavManager
@if (project == null)
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Please choose a project from the list to get detailed information about it.</h4>
        </div>
    </div>
}
else if (edit == true)
{
    <center>
        <div class="modal-body" style="width:50%; text-align: center;">
            <p>Edit the project title:</p>
            <input class="form-control" type="text"
                   placeholder="Project Title"
                   @bind="project.Title" /> <br />

            <p>Edit the project description:</p>
            <input class="form-control" type="text"
                   placeholder="Project Description"
                   @bind="project.Description" /> <br />

            <p>Edit the project short description:</p>
            <input class="form-control" type="text"
                   placeholder="Project Short Description"
                   @bind="project.DescriptionPreview" /> <br />

            <p>Edit the project deadline:</p>
            <input class="form-control" type="date"
                   placeholder="Project Deadline"
                   @bind="project.DeadLine" />

            <br />
            <!-- Button to save the project -->
            <button class="btn btn-primary"
                    @onclick="SaveProject">
                Save
            </button>
            <button class="btn btn-danger"
                    @onclick="DeleteProject">
                Delete
            </button>
            <button class="btn btn-success"
                    @onclick="GoBack">
                Back
            </button>
        </div>
    </center>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title" style="font-weight:bold">@project.Title</h5>
            <p class="card-text">@project.Description</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <span class="taskinfo badge badge-primary badge-pill list-group-item-danger">Created by @project.CreatedBy.UserName.Split('@').First()</span>
            </li>
            <li class="list-group-item">
                <span class="taskinfo badge badge-primary badge-pill list-group-item-success">Deadline: @project.DeadLine</span>
            </li>

            <li class="list-group-item">
                <h4>Students working on this project</h4>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Marcelino</span>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Iohannis</span>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Base</span>
                <span class="taskinfo badge badge-primary badge-pill list-group-item-info">Dancila</span>
            </li>
        </ul>
        <AuthorizeView Roles="ADMIN,MENTOR">
            <center>
                <button class="btn btn-primary" @onclick="@(() => EditProject(project))" style="width:20%">
                    Edit Project
                </button>
            </center>
        </AuthorizeView>
    </div>
}
@code {
    [Parameter]
    public int IdProject { get; set; }
    [Parameter]
    public EventCallback<int> IdProjectChanged { get; set; }

    private IList<Siemens.MP.Entities.Project> projects;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        projects = await ProjectRepository.GetAll();
    }

    public Siemens.MP.Entities.Project
       project => projects.FirstOrDefault(project => project.Id == IdProject);

    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public EventCallback<bool> editChanged { get; set; }

    public Project objProject;

    void EditProject(Project editProject)
    {
        objProject = editProject;
        edit = true;
    }

    private void SaveProject()
    {
        ProjectRepository.Update(objProject);
        OnInitializedAsync();
        edit = false;
    }

    private void DeleteProject()
    {
        ProjectRepository.Delete(IdProject);
        OnInitializedAsync();
        edit = false;
    }

    private void GoBack()
    {
        edit = false;
    }
}
