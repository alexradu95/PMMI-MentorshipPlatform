@page "/tasks"
@using Siemens.MP.Entities
@using Siemens.MP.Data
@using Siemens.MP.Enums
@using Microsoft.AspNetCore.Identity;
@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.Task> TaskRepository
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
<table class='table' id="tasks">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th>Task Name</th>
            <th>Description Preveiew</th>
            <th>Deadline</th>
            <th>Priority</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in tasks)
        {
            <tr>
                <th>@task.Id</th>
                <td><button class="btn btn-primary" @onclick="@(() => Navigate(task.Id))">@task.Name</button></td>
                <td>@task.DescriptionPreview</td>
                <td>@task.Deadline</td>
                <td>@task.PriorityState</td>
                <td>
                    @task.State
                </td>
            </tr>
        }
    </tbody>
    <AuthorizeView Roles="ADMIN,MENTOR">
        <tfoot>

            <tr>
                <td scope="row">#</td>
                <td>
                    <input placeholder="Task Name" @bind="taskName" />
                </td>
                <td>
                    <input placeholder="Preview of description" @bind="taskDescriptionPreview" />
                </td>
                <td>
                    <input type="date" @bind="deadline" />
                </td>
                <td>
                    <select @bind="priorityState">
                        @foreach (Priority pS in Enum.GetValues(typeof(Priority)))
                        {
                            <option value=@pS>@pS.ToString()</option>
                        }
                    </select>
                </td>
                <td></td>
            </tr>
        </tfoot>
    </AuthorizeView>
</table>

<AuthorizeView Roles="ADMIN,MENTOR">
    <div class="float-left">
        <button class="float-md-none" @onclick="AddTask">Add</button>
        <textarea placeholder="This is a task description" rows="3" style="resize:none;width:1000px" @bind="taskDescription"></textarea>
    </div>
</AuthorizeView>
}
@code {

    private string taskName;
    private string taskDescriptionPreview;
    private DateTime deadline;
    private StateOfTask status;
    List<Siemens.MP.Entities.Task> tasks;
    private Priority priorityState;
    private string taskDescription;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        List<Siemens.MP.Entities.Task> taskList = await TaskRepository.GetAll();
        tasks = taskList;

    }

    private void AddTask()
    {
        Siemens.MP.Entities.Task newTask = new Siemens.MP.Entities.Task
        {
            Name = taskName,
            DescriptionPreview = taskDescriptionPreview,
            Deadline = deadline,
            Description = taskDescription,
            PriorityState = priorityState,
        };
        TaskRepository.Insert(newTask);
        OnInitializedAsync();
        ResetFieldToDefault();
    }
    public void Navigate(int id)
    {
        navigationManager.NavigateTo($"/detailedtask/{id.ToString()}");

    }

    private void ResetFieldToDefault()
    {
        taskName = string.Empty;
        taskDescriptionPreview = string.Empty;
        taskDescription = string.Empty;
    }


}
