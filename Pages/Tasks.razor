@page "/tasks"
@using Siemens.MP.Entities
@using Siemens.MP.Data
@using Siemens.MP.Enums
@using Microsoft.AspNetCore.Identity;
@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.Task> TaskRepository
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table' id="tasks">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th>Task Name</th>
                <th>Description Preveiew</th>
                <th>Deadline</th>
                <th>Priority</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <th>@task.Id</th>
                    <td><button class="btn btn-primary" @onclick="@(() => Navigate(task.Id))">@task.Name</button></td>
                    <td>@task.DescriptionPreview</td>
                    <td>@task.Deadline</td>
                    <td>@task.PriorityState</td>
                    <td>
                        @task.State
                    </td>
                </tr>
            }
        </tbody>
        </table>
     <AuthorizeView Roles="ADMIN,MENTOR">
    <p>
        <button class="btn btn-primary"
                @onclick="AddNewProject">
            Add New Project
        </button>
        @if (ShowPopup)
        {
            <!-- This is the popup to create a project -->
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add new Task</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Form to add a new project -->
                        <div class="modal-body">
                            <input class="form-control" type="text"
                                   placeholder="Task Title"
                                   @bind="taskName" />

                            <input class="form-control" type="text"
                                   placeholder="Task Description"
                                   @bind="taskDescription" />

                            <input class="form-control" type="text"
                                   placeholder="Task Short Description"
                                   @bind="taskDescriptionPreview" />

                            <input class="form-control" type="date"
                                   placeholder="Task Deadline"
                                   @bind="deadline" />

                            <select @bind="priorityState">
                                @foreach (Priority pS in Enum.GetValues(typeof(Priority)))
                                {
                                    <option value=@pS>@pS.ToString()</option>
                                }
                            </select>
                            <br />
                            <!-- Button to save the project -->
                            <button class="btn btn-primary"
                                    @onclick="AddTask">
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </p>
         </AuthorizeView>
}

@code {

    private string taskName;
    private string taskDescriptionPreview;
    private DateTime deadline;
    private StateOfTask status;
    List<Siemens.MP.Entities.Task> tasks;
    private Priority priorityState;
    private string taskDescription;

    bool ShowPopup = false;

    Entities.Task task= new Entities.Task();

    void AddNewProject()
    {
        // Make new forecast
        task = new Entities.Task();
        // Set Id to 0 so we know it is a new record
        task.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        List<Siemens.MP.Entities.Task> taskList = await TaskRepository.GetAll();
        tasks = taskList;

    }

    private void AddTask()
    {
        Siemens.MP.Entities.Task newTask = new Siemens.MP.Entities.Task
        {
            Name = taskName,
            DescriptionPreview = taskDescriptionPreview,
            Deadline = deadline,
            Description = taskDescription,
            PriorityState = priorityState,
        };
        TaskRepository.Insert(newTask);
        OnInitializedAsync();
        ResetFieldToDefault();
    }
    public void Navigate(int id)
    {
        navigationManager.NavigateTo($"/detailedtask/{id.ToString()}");

    }

    private void ResetFieldToDefault()
    {
        taskName = string.Empty;
        taskDescriptionPreview = string.Empty;
        taskDescription = string.Empty;
    }


}
