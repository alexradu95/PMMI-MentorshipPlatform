@page "/projects"
@using Siemens.MP.Enums
@using Siemens.MP.Entities
@using System.Threading
@inject Siemens.MP.Data.ApplicationDbContext DbContext
@inject Siemens.MP.Data.Repositories.GenericRepository<Project> ProjectRepository
@inject Siemens.MP.Areas.Identity.IdentityUtilsService identityUtils
@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.ProjectUser> ProjectUserRepository
<link rel="stylesheet" href="/css/DetailedTask.css">

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="modal-body row">

    <AuthorizeView Roles="ADMIN,MENTOR">
        <div class="project-first-column">
            <h3>Projects</h3>
            <ul id="projlist" class="projects list-group list-group-flush">
                @foreach (Project project in projects)
                {
                    <li class="list-group-item py-4 border-style size-of-details liproject" title="@project.DescriptionPreview">
                        <div class="issue-content-container" @onclick="@(() => ChangeTheProjectID(project.Id))">
                            <center>
                                <span class="issue-link-key">@project.Title</span>
                                <span class="issue-link-summary">@project.DescriptionPreview</span>
                            </center>
                        </div>
                    </li>
                }

                <li class="list-group-item py-4 border-style size-of-details liproject">
                    <center>
                        <button class="btn btn-primary"
                                @onclick="TriggerPopUp">
                            Add New Project
                        </button>
                        <Siemens.MP.Pages.Components.AddProjectComponent @bind-ShowPopup="ShowPopup"></Siemens.MP.Pages.Components.AddProjectComponent>
                    </center>
                </li>


            </ul>

        </div>
    </AuthorizeView>
    <AuthorizeView Roles="STUDENT">
        <div class="project-first-column">
            <h3>Your Projects</h3>
            <ul id="projlist" class="projects list-group list-group-flush">
                @foreach (Project project in projects)
                    foreach (ProjectUser userPerProject in userProjects) if(userPerProject.ProjectId == project.Id && userPerProject.UserInfoId == userInfo.Id) {
                    <li class="list-group-item py-4 border-style size-of-details liproject" title="@project.DescriptionPreview">
                        <div class="issue-content-container" @onclick="@(() => ChangeTheProjectID(project.Id))">
                            <center>
                                <span class="issue-link-key">@project.Title</span>
                                <span class="issue-link-summary">@project.DescriptionPreview</span>
                            </center>
                        </div>
                    </li>
                    }
            </ul>

        </div>
    </AuthorizeView>
    <div class="project-second-column">
        <Siemens.MP.Pages.Components.DetailedProjectComponent @bind-IdProject="ProjectID" @bind-edit="edit" @bind-addTask="addTask" @bind-addStudent="addStudent"></Siemens.MP.Pages.Components.DetailedProjectComponent>
        <Siemens.MP.Pages.Components.ProjectTasksComponent @bind-IdProject="ProjectID"></Siemens.MP.Pages.Components.ProjectTasksComponent>
    </div>
</div>
}


@code {

    private IList<Siemens.MP.Entities.Project> projects;
    private IList<ProjectUser> userProjects;

    private UserInfo userInfo;

    [Parameter]
    public int ProjectID { get; set; }

    [Parameter]
    public bool edit { get; set; }

    [Parameter]
    public bool addTask { get; set; }

    [Parameter]
    public bool addStudent { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        userProjects = await ProjectUserRepository.GetAll();
        userInfo = identityUtils.GetCurrentUserAwaited();
        projects = await ProjectRepository.GetAll();
        ShowPopup = false;
    }

    private async System.Threading.Tasks.Task ChangeTheProjectID(int projectID)
    {
        ProjectID = projectID;
        edit = false;
        ShowPopup = false;
        addTask = false;
        addStudent = false;
        await OnInitializedAsync();
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool ShowPopup { get; set; }

    public void TriggerPopUp()
    {
        ShowPopup = true;
    }

}
