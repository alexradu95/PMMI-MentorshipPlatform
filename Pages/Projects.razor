@page "/projects"
@using Siemens.MP.Enums
@using Siemens.MP.Entities
@inject Siemens.MP.Data.ApplicationDbContext DbContext
@inject Siemens.MP.Data.Repositories.GenericRepository<Project> ProjectRepository

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="modal-body row">
        <div class="project-first-column">
            <h3>Projects</h3>
            <ul id="projlist" class="projects list-group list-group-flush">
                @foreach (Siemens.MP.Entities.Project project in projects)
                {
                    <li title="@project.Description" class="liproject">
                        <div class="issue-content-container" @onclick="@(() => ChangeTheProjectID(project.Id))">
                            <span class="issue-link-key">@project.Title</span>
                            <span class="issue-link-summary">@project.DescriptionPreview</span>
                        </div>
                    </li>
                }
            </ul>
            <AuthorizeView Roles="ADMIN,MENTOR">
                <p>
                    <button class="btn btn-primary"
                            @onclick="TriggerPopUp">
                        Add New Project
                    </button>
                    <Siemens.MP.Pages.Components.AddProjectComponent @bind-ShowPopup="ShowPopup"></Siemens.MP.Pages.Components.AddProjectComponent>
                </p>
                </AuthorizeView>
        </div>
        <div class="project-second-column">
            <Siemens.MP.Pages.Components.DetailedProjectComponent @bind-IdProject="ProjectID" @bind-edit="edit"></Siemens.MP.Pages.Components.DetailedProjectComponent>
            <Siemens.MP.Pages.Components.ProjectTasksComponent @bind-IdProject="ProjectID"></Siemens.MP.Pages.Components.ProjectTasksComponent>
        </div>
    </div>
}


@code {

    private IList<Siemens.MP.Entities.Project> projects;

    [Parameter]
    public int ProjectID { get; set; }

    [Parameter]
    public bool edit { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        projects = await ProjectRepository.GetAll();
        ShowPopup = false;
    }
    private void ChangeTheProjectID(int projectID)
    {
        ProjectID = projectID;
        edit = false;
        ShowPopup = false;
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool ShowPopup { get; set; }

    public void TriggerPopUp()
    {
        ShowPopup = true;
    }

}
