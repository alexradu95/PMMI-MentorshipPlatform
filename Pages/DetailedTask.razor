@page "/detailedtask/{taskId}"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.WebUtilities
@using Siemens.MP.Enums
@inject Siemens.MP.Data.Repositories.GenericRepository<Siemens.MP.Entities.Task> TaskRepository

@using System.Threading;
@inject NavigationManager NavManager
<link rel="stylesheet" href="/css/DetailedTask.css">
<body>
    <h2><i>@task.Name</i></h2>
    <div class="container upper-container">
        <div class="float-left">
            <label><b><i>Task Description:</i></b></label>
            <div class="card">
                <textarea readonly style="width:700px" class="border-style" rows="5">@task.Description</textarea>
            </div>
            <div class="form-group comment-section">
                <label><b><i>Comment Section: </i></b></label>
                <div class="media  border-style p-3 ">
                    <img src="/css/bootstrap/img.jpg" alt="John Doe" class="mr-3 mt-3 rounded-circle" style="width:60px;">
                    <div class="media-body">
                        <h4>John Doe <small><i>Posted on February 19, 2016</i></small></h4>
                        <textarea readonly rows="5" class="comment-text form-control">Lorem ipsum..Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum...Lorem ipsum....</textarea>
                    </div>
                </div>
                <div class="form-group ">
                    <textarea style="height:90px" class="form-control border-style commet-area" rows="7"></textarea>
                    <button type="button" class="btn btn-primary button1">Submit</button>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="float-right right-side-container ">
            <ul class="list-group ">
                <li class="list-group-item py-4 border-style size-of-details">Assignee: <img src="/css/bootstrap/img.jpg" alt="John Doe" class="mr-1 mt-1 rounded-circle" style="width:40px;" /> @task.CreatedBy</li>
                <li class="list-group-item py-4 border-style size-of-details">Reporter: <img src="/css/bootstrap/img.jpg" alt="John Doe" class="mr-1 mt-1 rounded-circle" style="width:40px;" /> @task.CreatedBy</li>
                <li class="list-group-item py-4 border-style size-of-details">
                    Status: <span class="badge badge-secondary">
                        <select @bind="@task.State">
                            @foreach (StateOfTask taskState in Enum.GetValues(typeof(StateOfTask)))
                            {
                                <option value=@taskState>@taskState.ToString()</option>
                            }
                        </select>
                    </span>
                    <button class="btn btn-primary" @onclick="UpdateDB">Update</button>
                </li>
                <li class="list-group-item py-4 border-style size-of-details">Priority: <span class="badge badge-danger">@task.PriorityState</span> </li>
                <li class="list-group-item py-4 border-style size-of-details">Created Date: @task.CreatedAt</li>
                <li class="list-group-item py-4 border-style size-of-details">Due Date: @task.Deadline </li>
                <li class="list-group-item py-4 border-style size-of-details">Remaining Time: @NumberOfDaysRemaining days</li>
            </ul>
            <AuthorizeView Roles="ADMIN,MENTOR">
                <button class="btn btn-primary button2" @onclick="DeleteTask">Delete Task</button>
            </AuthorizeView>
        </div>
    </div>

</body>
@code {

    [Parameter]
    public string taskId { get; set; }
    public TimeSpan difference;
    public int NumberOfDaysRemaining;
    public Siemens.MP.Entities.Task newTask = new Siemens.MP.Entities.Task();
    public int i = 1;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("taskId", out var taskId))
        {
            var name = taskId.First();
        }
    }
    public IList<Siemens.MP.Entities.Task> tasksList;
    

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        
        tasksList = await TaskRepository.GetAll();
        if (DateTime.Now < task.Deadline)
        {
            difference = task.Deadline - DateTime.Now;
            NumberOfDaysRemaining = (int)difference.TotalDays;
        }

    }

    public Siemens.MP.Entities.Task
       task => tasksList.FirstOrDefault(task => task.Id.ToString() == taskId);
    private void UpdateDB()
    {
        newTask = task;
        TaskRepository.Update(newTask);
    }
    public void DeleteTask()
    {
        TaskRepository.Delete(task.Id);
        NavManager.NavigateTo("/tasks");
    }
}

